# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
- name: tf_version
  value: 0.14.2
- name: env_id
  value: 009

trigger:
- development
- feature/*

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python36:
      PYTHON_VERSION: '3.6'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

# - script: |
#     echo $(tfc-api)
#     python -m pip install --upgrade pip setuptools wheel
#     pip install -r requirements.txt
#     pip install unittest-xml-reporting pycodestyle
#     sudo systemctl stop postgresql
#     sudo apt-get --purge remove postgresql*
#     sudo rm -rf /etc/postgresql-common /var/log/postgresql /var/lib/postgresql /etc/postgresql
#     curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
#     sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#     sudo apt-get update
#     sudo apt-get install -y postgresql-9.6 redis-server awscli terraform=${{ variables.tf_version }}
#     sudo -u postgres psql -U postgres -c "alter user postgres with password 'test';"
#   displayName: 'Install prerequisites'

# - script: |
#     PGPASSWORD='test' psql -h localhost -U postgres -c 'SELECT version();'
#     redis-cli ping
#   displayName: 'Test service dependencies'

# - script: |
#     ./scripts/cibuild.sh
#   displayName: 'Run tests'

- task: AzureCLI@2
  displayName: 'Get Active Side'
  inputs:
    azureSubscription: 'XSP24782|MICROSOFT|XSP24782|XSP319227 (dd4688e7-0261-48c4-843e-2047caef8e24)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      ACTIVE_SIDE=$(az vm show -n nb-app-azure-$(env_id)-blue.kpscdemo.io -g netbox-demo-$(env_id)-rg --query 'tags.ActiveSide -o tsv)
      echo "##vso[task.setvariable variable=active_side]$ACTIVE_SIDE"

- script: |
    echo $(active_side)
  displayName: 'Test output capture'

- task: GitHubRelease@1
  displayName: 'Create Release'
  inputs:
    gitHubConnection: 'GitHub - kpsc-automation'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'gitTag'
    tagPattern: 'v*.*.*'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
